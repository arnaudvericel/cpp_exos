#include <cstdlib>
#include <ctime>
#include <iostream>

/*
An more efficient way of filling a 12 characters random buffer would be to generate 3
unsigned int (4 bytes each) and fill the buffer with all 12 generated bytes, instead
of generating 48 bytes (12 unsigned int) and casting them to char every time.
*/

unsigned int Rand32()
{
    return static_cast<unsigned int>(rand()); // assumed to be 32 bits = 4 bytes
}

/*
One way of doing that would be to use a union to separate the unsigned int into
its 4 bytes.
*/
void FillBufferUsingUnion()
{
    char buffer[12];
    union
    {
        unsigned int value;
        char bytes[4];
    } converter;
    for (int i = 0; i<12; i+=4)
    {
        converter.value = Rand32();
        for (int j = 0; j<4; j++)
        {
            buffer[i + j] = converter.bytes[j];
        }
    }
    std::cout << "Using union: <" << buffer << ">" << std::endl;
}

/*
Another, better, way of doing that would be to generate the unsigned int
and copying its bytes into the buffer, thus filling 4 bytes at a time.
*/
void FillBufferUsingMemCpy()
{
    char buffer[12];
    unsigned int randomValue;
    for (int i=0; i<12; i+=4)
    {
        randomValue = Rand32();
        memcpy(buffer + i, &randomValue, 4);
    }
    std::cout << "Using memcpy: <" << buffer << ">" << std::endl;
}

int main()
{
    srand(time(NULL));

    FillBufferUsingUnion();
    FillBufferUsingMemCpy();

    return 0;
}

/*
Output example :
--
Using union: <?\?ZK?8?@?>
Using memcpy: <.BDG??TR??J?>
--
*/
